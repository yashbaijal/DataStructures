
Write an SQL query to find all numbers that appear at least three times consecutively.
eg:

Input: 
Logs table:
+----+-----+
| id | num |
+----+-----+
| 1  | 1   |
| 2  | 1   |
| 3  | 1   |
| 4  | 2   |
| 5  | 1   |
| 6  | 2   |
| 7  | 2   |
+----+-----+
Output: 
+-----------------+
| ConsecutiveNums |
+-----------------+
| 1               |
+-----------------+

select distinct l1.num as COnsicutiveNums from logs l1 join logs l2 on li.id=l2.id+1 and l1.num=l2.num
join logs ls l1.id=l3.id+2 and l1.num=l3.num.

================================================

Write an SQL query to report all the duplicate emails.

Person table:
+----+---------+
| id | email   |
+----+---------+
| 1  | a@b.com |
| 2  | c@d.com |
| 3  | a@b.com |
+----+---------+
Output: 
+---------+
| Email   |
+---------+
| a@b.com |
+---------+
Explanation: a@b.com is repeated two times.

select email from person group by email having count(email)>1;

===============================================

Write an SQL query to report all customers who never order anything.

Input: 
Customers table:  id is the primary key column 
+----+-------+
| id | name  |
+----+-------+
| 1  | Joe   |
| 2  | Henry |
| 3  | Sam   |
| 4  | Max   |
+----+-------+
Orders table:
id is the primary key column for this table.
customerId is a foreign key of the ID from the Customers table.

+----+------------+
| id | customerId |
+----+------------+
| 1  | 3          |
| 2  | 1          |
+----+------------+

select name as customers from  Customers where id not in (select customerId from orders);

select name as customers from  Customers c LEFT JOIN Orders o  on c.id=o.customerId 
where o.customerId is null;
====================================================
