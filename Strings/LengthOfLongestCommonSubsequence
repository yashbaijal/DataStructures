================Using Recursive call======================
public class codePrep {

    public static int solve(String a, String b, int i,int j)
    {
        if(i==a.length())
            return 0;
        if(j==b.length())
            return 0;

        int ans=0;

        if(a.charAt(i)==b.charAt(j))
        {
            ans=1+solve(a,b,i+1,j+1);
        }
        else {
             ans=Math.max(solve(a,b,i+1,j),solve(a,b,i,j+1));
        }
        return ans;
    }

public static int longestCommonSubstring(String a, String b)
{
    return solve(a,b,0,0);
}


    public static void main(String[] args) {

        String s1="aggtab";
        String s2="gxtxayb";
        int output=longestCommonSubstring(s1,s2);
        System.out.println(output);
    }
}

======================Using DP(Top Down Approach) to ignore TimeLimitExecution Error=================

public class codePrep {

    public static int solve(String a, String b, int i,int j,int [][] dp)
    {
        if(i==a.length())
            return 0;
        if(j==b.length())
            return 0;

        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        int ans=0;

        if(a.charAt(i)==b.charAt(j))
        {
            ans=1+solve(a,b,i+1,j+1,dp);
        }
        else {
             ans=Math.max(solve(a,b,i+1,j,dp),solve(a,b,i,j+1,dp));
        }
        return ans;
    }

public static int longestCommonSubstring(String a, String b,int [][] dp)
{
    return solve(a,b,0,0,dp);
}


    public static void main(String[] args) {

        String s1="aggtab";
        String s2="gxtxayb";
        int [][] dp=new int [s1.length()+1][s2.length()+1];
        for (int i = 0; i < s1.length() + 1; i++) {
            for (int j = 0; j < s2.length() + 1; j++) {
                dp[i][j] = -1;
            }
        }
        int output=longestCommonSubstring(s1,s2,dp);
        System.out.println(output);
    }
}
