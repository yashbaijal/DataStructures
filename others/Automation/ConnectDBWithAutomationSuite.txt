1. Add JDBC driver to our suite pom.xml
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.30</version>
</dependency>

2. Create A database utility class 

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class DatabaseUtil {

    private static final String URL = "jdbc:mysql://localhost:3306/automation_db";
    private static final String USER = "yourUsername";
    private static final String PASSWORD = "yourPassword";
    private Connection connection;

    // Connect to the database
    public void connect() throws SQLException {
        connection = DriverManager.getConnection(URL, USER, PASSWORD);
    }

    // Disconnect from the database
    public void disconnect() throws SQLException {
        if (connection != null && !connection.isClosed()) {
            connection.close();
        }
    }

    // Method to fetch data from a query and return as Object[][]
    public Object[][] fetchDataForDataProvider(String query) throws SQLException {
       Map<Integer, Map<String, Object>> data = new HashMap<>();
        
        try (PreparedStatement statement = connection.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {

            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();
            int rowNumber = 1; // Start row number from 1, or 0 if you prefer zero-based

            while (resultSet.next()) {
                Map<String, Object> row = new HashMap<>();
                
                for (int i = 1; i <= columnCount; i++) {
                    String columnName = metaData.getColumnName(i);
                    Object columnValue = resultSet.getObject(i);
                    row.put(columnName, columnValue);
                }

                data.put(rowNumber++, row); // Associate the row number with the row data
            }
        }
        return data;
    }
}
--------------------------------------------------------------------------------

3. Use the DB utility class in test methods to fetch data 

import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.sql.SQLException;

public class DatabaseTest {

    private DatabaseUtil dbUtil;

    @BeforeClass
    public void setUp() throws SQLException {
        dbUtil = new DatabaseUtil();
        dbUtil.connect();  // Connect to the database
    }

    @DataProvider(name = "userDataProvider")
    public Object[][] userDataProvider() throws SQLException {
        String query = "SELECT username, email FROM users WHERE status = 'active'";
        Map<Integer, Map<String, Object>> data = dbUtil.fetchDataAsRowMap(query);

        // Convert Map<Integer, Map<String, Object>> to Object[][] for DataProvider
        Object[][] dataArray = new Object[data.size()][1];
        int index = 0;
        for (Map.Entry<Integer, Map<String, Object>> entry : data.entrySet()) {
            dataArray[index++][0] = entry.getValue(); // Each row is a Map
        }
        
        return dataArray;
    }

    @Test(dataProvider = "userDataProvider")
    public void testFetchUserData(Map<String, Object> rowData) {
        String username = (String) rowData.get("username");
        String email = (String) rowData.get("email");
        
        System.out.println("User: " + username + ", Email: " + email);
        
        // Example assertion
        assert email.contains("@") : "Invalid email format for user: " + username;
    }

    @AfterClass
    public void tearDown() throws SQLException {
        dbUtil.disconnect();  // Close the connection
    }
}
----------------------------------------------------------------
